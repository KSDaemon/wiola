{"name":"Wiola","tagline":"WAMP implementation in LUA","body":"wiola\r\n=====\r\n\r\nWAMP (WebSocket Application Messaging Protocol) implementation on Lua, using the power of LUA Nginx module,\r\nLua WebSocket addon, and Redis as cache store.\r\n\r\nTable of Contents\r\n=================\r\n\r\n* [Description](#description)\r\n* [Usage example](#usage-example)\r\n* [Installation](#installation)\r\n* [Dependencies](#dependencies)\r\n* [Methods](#methods)\r\n    * [setupRedis](#setupredishost-port-db)\r\n    * [addConnection](#addconnectionsid-wampproto)\r\n    * [removeConnection](#removeconnectionregid)\r\n    * [receiveData](#receivedataregid-data)\r\n    * [getPendingData](#getpendingdataregid)\r\n    * [processPostData](#processpostdatasid-realm-data)\r\n* [Copyright and License](#copyright-and-license)\r\n* [See Also](#see-also)\r\n\r\nDescription\r\n===========\r\n\r\nWiola implements [WAMP](http://wamp.ws) v2 router specification on top of OpenResty web app server,\r\n which is actually nginx plus a bunch of 3rd party modules, such as lua-nginx-module, lua-resty-websocket,\r\n lua-resty-redis, lua-resty-libcjson and so on.\r\n\r\nwiola supports next WAMP roles and features:\r\n\r\n* broker: advanced profile with features:\r\n    * subscriber blackwhite listing\r\n    * publisher exclusion\r\n    * publisher identification\r\n* dealer: advanced profile with features:\r\n    * callee blackwhite listing\r\n    * caller exclusion\r\n    * caller identification\r\n    * progressive call results\r\n\r\nWiola supports JSON and msgpack serializers.\r\n\r\nFrom v0.3.1 Wiola also supports lightweight POST event publishing. See processPostData method and post-handler.lua for details.\r\n\r\n[Back to TOC](#table-of-contents)\r\n\r\nUsage example\r\n=============\r\n\r\nFor example usage, please see [handler.lua](src/wiola/handler.lua) file.\r\n\r\n[Back to TOC](#table-of-contents)\r\n\r\nInstallation\r\n============\r\n\r\nTo use wiola you need:\r\n\r\n* Nginx orÂ OpenResty\r\n* [luajit](http://luajit.org/)\r\n* [lua-nginx-module](https://github.com/chaoslawful/lua-nginx-module)\r\n* [lua-resty-websocket](https://github.com/agentzh/lua-resty-websocket)\r\n* [lua-resty-redis](https://github.com/agentzh/lua-resty-redis)\r\n* [Redis server](http://redis.io)\r\n* [lua-resty-libcjson](https://github.com/bungle/lua-resty-libcjson)\r\n* [lua-MessagePack](http://fperrad.github.io/lua-MessagePack/) (optional)\r\n\r\nInstead of compiling lua-* modules into nginx, you can simply use [OpenResty](http://openresty.org) server.\r\n\r\nNext thing is configuring nginx host. See example below.\r\n\r\n```nginx\r\n# set search paths for pure Lua external libraries (';;' is the default path):\r\n# add paths for wiola and msgpack libs\r\nlua_package_path '/usr/local/lualib/wiola/?.lua;/usr/local/lualib/lua-MessagePack/?.lua;;';\r\n\r\n# Configure a vhost\r\nserver {\r\n   # example location for websocket WAMP connection\r\n   location /ws/ {\r\n      lua_socket_log_errors off;\r\n      lua_check_client_abort on;\r\n\r\n      # This is needed to set additional websocket protocol headers\r\n      header_filter_by_lua_file $document_root/lua/wiola/headers.lua;\r\n      # Set a handler for connection\r\n      content_by_lua_file $document_root/lua/wiola/handler.lua;\r\n   }\r\n\r\n   # example location for a lightweight POST event publishing\r\n   location /wslight/ {\r\n      lua_socket_log_errors off;\r\n      lua_check_client_abort on;\r\n\r\n      content_by_lua_file $document_root/lua/wiola/post-handler.lua;\r\n   }\r\n\r\n}\r\n```\r\n\r\nActually, you do not need to do anything else. Just take any WAMP client and make a connection.\r\n\r\n[Back to TOC](#table-of-contents)\r\n\r\nMethods\r\n========\r\n\r\nsetupRedis(host, port, db)\r\n------------------------------------------\r\n\r\nConfigure and initialize connection to Redis server.\r\n\r\nParameters:\r\n\r\n * **host** - Redis server host or Redis unix socket path\r\n * **port** - Redis server port (in case of use network connection). Omit for socket connection.\r\n * **db** - Redis database index to select\r\n\r\nReturns:\r\n\r\n * **Connection flag** (integer)\r\n * **Error description** (string) in case of error, nil on success\r\n\r\n[Back to TOC](#table-of-contents)\r\n\r\naddConnection(sid, wampProto)\r\n------------------------------------------\r\n\r\nAdds new connection instance to wiola control.\r\n\r\nParameters:\r\n\r\n * **sid** - nginx session id\r\n * **wampProto** - chosen WAMP subprotocol. It is set in header filter. So just pass here ngx.header[\"Sec-WebSocket-Protocol\"]. It's done just in order not to use shared variables.\r\n\r\nReturns:\r\n\r\n * **WAMP session ID** (integer)\r\n * **Connection data type** (string: 'text' or 'binary')\r\n\r\n[Back to TOC](#table-of-contents)\r\n\r\nremoveConnection(regId)\r\n------------------------------------------\r\n\r\nRemoves connection from viola control. Cleans all cached data. Do not neglect this method on connection termination.\r\n\r\nParameters:\r\n\r\n * **regId** - WAMP session ID\r\n\r\nReturns: nothing\r\n\r\n[Back to TOC](#table-of-contents)\r\n\r\nreceiveData(regId, data)\r\n------------------------------------------\r\n\r\nThis method should be called, when new data is received from web socket. This method analyze all incoming messages, set states and prepare response data for clients.\r\n\r\nParameters:\r\n\r\n * **regId** - WAMP session ID\r\n * **data** - received data\r\n\r\nReturns: nothing\r\n\r\n[Back to TOC](#table-of-contents)\r\n\r\ngetPendingData(regId)\r\n------------------------------------------\r\n\r\nChecks the store for new data for client.\r\n\r\nParameters:\r\n\r\n * **regId** - WAMP session ID\r\n\r\nReturns:\r\n\r\n * **client data** (type depends on session data type) or **null**\r\n * **error description** in case of error\r\n\r\n This method is actualy a proxy for redis:lpop() method.\r\n\r\n[Back to TOC](#table-of-contents)\r\n\r\nprocessPostData(sid, realm, data)\r\n------------------------------------------\r\n\r\nProcess lightweight POST data from client containing a publish message. This method is intended for fast publishing\r\nan event, for example, in case when WAMP client is a browser application, which makes some changes on backend server,\r\nso backend is a right place to notify other WAMP subscribers, but making a full WAMP connection is not optimal.\r\n\r\nParameters:\r\n\r\n * **sid** - nginx session connection ID\r\n * **realm** - WAMP Realm to operate in\r\n * **data** - data, received through POST (JSON-encoded WAMP publish event)\r\n\r\nReturns:\r\n\r\n * **response data** (JSON encoded WAMP response message in case of error, or { result = true })\r\n * **httpCode** HTTP status code (HTTP_OK/200 in case of success, HTTP_FORBIDDEN/403 in case of error)\r\n\r\n[Back to TOC](#table-of-contents)\r\n\r\nCopyright and License\r\n=====================\r\n\r\nWiola library is licensed under the BSD 2-Clause license.\r\n\r\nCopyright (c) 2014, Konstantin Burkalev\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n* Redistributions of source code must retain the above copyright notice, this\r\n  list of conditions and the following disclaimer.\r\n\r\n* Redistributions in binary form must reproduce the above copyright notice,\r\n  this list of conditions and the following disclaimer in the documentation\r\n  and/or other materials provided with the distribution.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\r\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\r\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\r\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\r\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\r\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\n[Back to TOC](#table-of-contents)\r\n\r\nSee Also\r\n========\r\n\r\n* [WAMP specification](http://wamp.ws)\r\n* [Wampy.js](https://github.com/KSDaemon/wampy.js). WAMP Javascript client-side implementation.\r\n* [OpenResty](http://openresty.org)\r\n* [lua-nginx-module](https://github.com/chaoslawful/lua-nginx-module)\r\n* [lua-resty-websocket](https://github.com/agentzh/lua-resty-websocket)\r\n* [lua-resty-libcjson](https://github.com/bungle/lua-resty-libcjson)\r\n* [lua-resty-redis](https://github.com/agentzh/lua-resty-redis)\r\n* [Redis key-value store](http://redis.io)\r\n* [lua-MessagePack](http://fperrad.github.io/lua-MessagePack/)\r\n\r\n[Back to TOC](#table-of-contents)\r\n","google":"UA-52132189-1","note":"Don't delete this file! It's used internally to help with page regeneration."}